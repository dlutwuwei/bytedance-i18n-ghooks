#!/usr/bin/env node
// {{generated_message}}

const fs = require('fs')
const path = require('path')
const nodeModulesPath = '{{node_modules_path}}'
const ghooks = getGhooksEntryPoint()

if (checkForGHooks(ghooks)) {
  require(ghooks)(nodeModulesPath, __filename)
  runShell(__filename + ".bkp")

}

function getGhooksEntryPoint() {
  try {
    require('bytedance-i18n-ghooks')
    return 'bytedance-i18n-ghooks'
  } catch (e) {
    return getGhooksAbsoluteEntryPoint()
  }
}

function getGhooksAbsoluteEntryPoint() {
  const worktree = getWorkTree()
  if (worktree) {
    return path.resolve(__dirname, '../', worktree, 'node_modules', 'bytedance-i18n-ghooks')
  }
  return path.resolve(nodeModulesPath, 'bytedance-i18n-ghooks')
}

function checkForGHooks(ghooksPath) {
  try {
    require(ghooksPath)
  } catch (e) {
    warnAboutGHooks()
    return false
  }
  return true
}

function getWorkTree() {
  try {
    return getWorkTreeFromConfig(getConfigFileContent())
  } catch (e) {
    return null
  }
}

function getConfigFileContent() {
  const configFile = path.resolve(__dirname, '../config')
  const fileStat = fs.statSync(configFile)
  if (fileStat && fileStat.isFile()) {
    return fs.readFileSync(configFile, 'utf8')
  }
  return ''
}

function getWorkTreeFromConfig(configFileContent) {
  const worktreeRegEx = /\[core\][^]{0,}worktree = ([^\n]{1,})[^]{0,}/
  return worktreeRegEx.test(configFileContent) ? configFileContent.replace(worktreeRegEx, '$1') : ''
}

function warnAboutGHooks() {
  console.warn( // eslint-disable-line no-console
    'ghooks not found!\n' +
    'Make sure you have it installed on your "node_modules".\n' +
    'Skipping git hooks.'
  )
}

function runShell(cmd, args, cb_stdout, cb_end) {
  let fileStat = null
  try {
    fileStat = fs.statSync(cmd)
  } catch(e) {
    return 0
  }
  if (fileStat && fileStat.isFile()) {
    let spawn = require('child_process').spawn,
      child = spawn(cmd, args),
      me = {}
    me.exit = 0  // Send a cb to set 1 when cmd exits
    if(cb_stdout) child.stdout.on('data', function (data) { cb_stdout(me, data) })
    if(cb_end) child.stdout.on('end', function () { cb_end(me) })
  }
}
